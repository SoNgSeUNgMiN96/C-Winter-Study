#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 500000
int heap[MAX_SIZE];

void push(int item, int *n)
{
	int i = 0;
	i = ++(*n);	//++n값 

/* 개념은 부모-자식 간 비교하면서 즉시 서로 자리를 바꾸는 것이지만 */
/* 실제 코드 구현상에서는 들어올 자식보다 작았던 부모는 먼저 그 자리로 바꾼 뒤 */
/* while문 빠져나올 때 새로 들어올 자식을 최종적으로 넣으면 됨. */

	while ((i != 1) && item > heap[i/2]) {
		heap[i] = heap[i / 2]; // 원래 자식 들어갈 자리에 부모의 값 저장
		i = i / 2; // 새로 들어올 자식이 기존 부모자리에 들어갈 것을 대비해 i를 반 줄임
	}
	heap[i] = item;
}

int delete(int *n){
 int first, temp, parent, child;
	first = heap[1];
	temp = heap[(*n)--];	//n값--, temp = last node 
	parent = 1;
	child = 2;

	while (child <= *n) {
		if ((child < *n) && (heap[child] < heap[child + 1]))//자식노드중 작은값찾기 
			child++;

		if (temp >= heap[child]) //마지막 노드값과 자식노드 비교, 
			break;

		heap[parent] = heap[child]; //부모노드와 자식노드 swtich 
		parent = child;
		child *= 2; //밑에칸으로 이동 
	}

	heap[parent] = temp;
	return first;
}

int main(void)
{
	int input,i,N,a,j;
	int k = 0;
	int n = 0, count = 0;
	int output[500000];
	scanf("%d", &N);
	for(i=0; i<N; i++){
		scanf("%d", &a);
		if(a==0)
		{
			if(count==0)
			{
				output[k] = -1;
			}
			else{
				output[k] = delete(&count);
			}
			k++;
		}
		for(j=0; j<a; j++){
			scanf("%d", &input);
			push(input, &n);
			count++;
		}
	} 
	
	
	for(i=0; i<k; i++)
	{
		printf("%d\n", output[i]);	
	}	


}
