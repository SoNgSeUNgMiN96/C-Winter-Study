#include <stdio.h>
#include <stdlib.h>
// boj 2512 
// 이진탐색 예산문제 
// 예산총액 M > 요청예산의 합 sum   ->  요청 예산중 최댓값 출력
// 예산총액 M < sum  --> 예산 최댓값을 정함 (mid)
// mid 값의 최댓값을 구함 
// 이진탐색을 통해 mid 값 갱신
//  상한선을 정했을 때의 예산의 합 sum limit
// if(sum limit< M) low = mid+1;
// if(sum limit > M) high = mid-1; 
int main(){
	int i, N;
	long long int M; 
	scanf("%d",&N);
	long int request[N], reduce[N];
	long int high = 0;
	long int low = 0;
	long long int sum = 0;
	
	long int max = 0;
	for(i=0; i<N; i++)
	{
		scanf("%ld", &request[i]);
		if(request[i]>high)
		{
			high = request[i];
		}
		sum += request[i];
		//printf("sum = %lld\n",sum);
	}
	
	scanf("%lld",&M);
	if(sum<=M )//총합이 예산보다 적은경우 최댓값 출력 
	{
		max = high;
	}
	else if(sum >M)
	{
		while(low<=high)
		{
			long long int sumlimit = 0;
			int mid = (high+low)/2; // 현재의 예산 상한선 
			for(i=0; i<N; i++)
			{
				reduce[i] = request[i]; //reduce배열에 예산값들 저장 후  
				//reduce[i] = reduce[i] - mid;//mid값을 뺀 값을 저장 즉 상한선을 만듬 
				if(reduce[i]>mid)
				{
					reduce[i] = mid;
				}
				sumlimit += reduce[i]; //상한선 정했을 때 총합 
			}
			 
			if(sumlimit<=M)	//총 예산보다 작은경우 low값 증가 
			{
				max = mid;	//총에산 == sumlimit일때의 mid값 보다 상한액이 더 클 수 있음 
				low = mid+1; 
			}
			else if(sumlimit>M)	//총 예산보다 큰경우 high값 감소
			{
				high = mid - 1;	
			}
			/*else if(sumlimit == M)
			{
				max = mid;
				break;
			}*/
		//	printf("max = %ld\n", max); 
		//	printf("sumlimit = %lld\n", sumlimit);
		}
	}
	printf("%d", max);
}
