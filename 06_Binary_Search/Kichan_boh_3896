#include <stdio.h>
#include <stdlib.h>

// boj 3896 소수사이순열
// 주어진 k값을 포함하는 두 소수 사이의 거리계산. k가 소수인 경우 0
// 방법: k를 기준으로 +-1씩 하며 소수인지 확인 - 비효율적인것같음 
//  방법2: 에라토스테네스의 체를 이용하여 소수들 정렬 이진탐색으로 탐색  
//	수정:소수들로만 정렬 이후 이진탐색을 통해 k가 들어갈 자리 찾음 

//에라토스테네스의 체
int num = 1299709;
int a[1299710];	//전체 수들의 배열 
int b[10000];	//소수들만 정렬한 배열 
void primeNumberSieve(){
	int i,j;
	a[0] = 0;
	a[1] = 1; 
	for(i = 2; i<= num; i++)
	{
		a[i] = i;
	}
	for(i = 2; i<=num; i++)
	{
		if(a[i] ==0 )
		continue;
		for(j = i+i; j<=num; j +=i)
		{
			a[j] =0;
		}
	}
	/*for(i = 2; i<=num; i++)
	{
		if(a[i]!=0)
		printf("%d\t", a[i]);
	}*/
	j=0;
	for(i = 2; i<=num; i++)
	{
		if(a[i]!=0)	//소수가 아닐때 
		{
			b[j] =  i;
			j++;
		}
	}
	//printf("%d", b[9999]);
	
} 

int main() {
	int i,T,q,K;
	
	primeNumberSieve();
	scanf("%d", &T);
	int k[T];
	for(i=0; i<T; i++)
	{
		scanf("%d", &k[i]);
	}
	
	for(i=0; i<T; i++)
	{
		/*q = k[i];
		if(a[q]!=0)	//k가 소수인 경우 
		{
			printf("0"); 
		}*/
		K = k[i];
			//k보다 작은 소수
		int mid, low, high,len, middle;
		high = 99999;
		low = 0;
		int near = 0;
		while(high>=low)
		{
			mid = (high+low)/2;
			middle = b[mid];
			if(middle>K)	//탐색힌값이 k보다 큰경우 범위 아래로 
			{
				near = mid;
				high = mid-1;
			}
			else if(middle<K)	//탐색한값이 k보다 작으면 범위 위로  
			{
				near = mid;
				low = mid +1;
				
			}
			else if(middle == K)
			{
				near = 0;
				break;
			}
			
		}
		//printf("%d\n",near);
		if(near ==0)
		{
			printf("%d\n",near);
		}
		else{
			
		
			if(b[near]>K)	//k보다 큰 소수를 찾았을때 
			{
				len = b[near] - b[near-1];
			}
			else	//k보다 작은 소수를 찾았을 때 
			{
				len = b[near+1] -b[near];
			}
			printf("%d\n", len);
				 
		}
			//k보다 큰 소수 
		
	}
	return 0;
}
